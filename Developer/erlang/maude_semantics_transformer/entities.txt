( fmod SEM_ENTITIES is
	protecting MAUDE-SYNTAX-UPDOWN .
	protecting SEM_ENTITY .
  protecting SEM_PROCESS .
  protecting SEM_MESSAGE .
  protecting SEM_PID_SEQUENCE .


sort Entities .
  subsort Entity < Entities .

	op #empty-entity : -> Entities [ctor] .
	op _||_ : Entities Entities -> Entities [ctor assoc comm id: #empty-entity] .

  op #setup-first-proc : Entities FunName FunDefSeq -> Entities .

  var ENTRYPOINT : FunName .
  var ENTS : Entities .
  var MOD : FunDefSeq .
  var EX : Exp .
  var ME : ModEnv .

  ceq #setup-first-proc(ENTS, ENTRYPOINT, MOD) =
      < tau | #no-res | EX | ME | pid(0) > || pid(0)
    if ME := #extract-functions(MOD) /\
       EX := #get-function(ENTRYPOINT, ME) .

	op #up : Entities -> Term [memo] .
  op #downEntity : Term -> Entity [memo] .
	op #downEntities : Term -> Entities [memo] .

	var P : Process .
  var MSG : Message .
  var E : Entity .
	var SUB : Substitution .
	vars T T1 T2 T3 T4 T5 : Term .

	eq #up(#empty-entity) = '#empty-entity.Entities .

	ceq #up(E || ENTS) = '_||_[#up(E), #up(ENTS)]
		if (ENTS =/= #empty-entity) .

	eq #downEntities('#empty-entity.Entities) = #empty-entity .

	ceq #downEntities(T) = #downEntity(T1) || #downEntities(T2)
  if SUB := metaMatch(GRAMMAR, '_||_['E:Entity, 'ENTS:Entities], T, nil, 0)
		/\ 'E:Entity <- T1 ; 'ENTS:Entities <- T2 := SUB .

  eq #downEntity('<_|_|_>[T1,T2,T3]) = #downMessage('<_|_|_>[T1,T2,T3]) .

  eq #downEntity('<_|_|_|_|_>[T1,T2,T3,T4,T5]) = #downProcess('<_|_|_|_|_>[T1,T2,T3,T4,T5]) .

  eq #downEntity('_`,_[T1,T2]) = #downPidSequence('_`,_[T1,T2]) .
endfm ) 
